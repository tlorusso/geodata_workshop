install.packages(" prettydoc")
library( prettydoc)
install.packages("prettydoc")
library(pacman)
pacman::p_load(tmap, statR, tidyverse, sp, cartogram)
data(metro, World)
data(World, metro)
metro$growth <- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100
mapWorld <- tm_shape(World) +
tm_polygons("income_grp", palette="-Blues", contrast=.7, id="name", title="Income group") +
tm_shape(metro) +
tm_bubbles("pop2010", col = "growth",
border.col = "black", border.alpha = .5,
style="fixed", breaks=c(-Inf, seq(0, 6, by=2), Inf),
palette="-RdYlBu", contrast=1,
title.size="Metro population",
title.col="Growth rate (%)", id="name") +
tm_style_gray() + tm_format_World_wide()
mapWorld
load(file = "hexbin_orig.RData")
load(file = "hex_geb_fake.RData")
load(file = "ZHshape.RData")
tmap_mode("plot")
hex_geb_data <- hex_geb_fake%>%
mutate(bfs_akt=ifelse(bfs_akt==133, 295,
ifelse(bfs_akt==217, 294, bfs_akt))) %>%
group_by(bfs_akt) %>%
summarise(anz=n(),
med_preis=median(n_preis/500))
ZHshape2 <- ZHshape
ZHshape2@data <- ZHshape2@data %>% mutate(BFS=as.numeric(as.character(BFS)))
ZHshape2@data <- left_join(ZHshape2@data, hex_geb_data, by = c("BFS" = "bfs_akt"))
ZHshape2@data <- ZHshape2@data %>% as.data.frame()
View(hex_geb_data)
hex_geb_data <- hex_geb_fake %>%
mutate(bfs_akt=ifelse(bfs_akt==133, 295,
ifelse(bfs_akt==217, 294, bfs_akt)))
View(hex_geb_data)
View(hex_geb_fake)
source("P:/db_connect.r")
source("L:/STAT/03_AS/01_Werkzeuge/01_Toolbox/R/Funktionen/my_sum.r")
names(t_gemeinde)<-tolower(names(t_gemeinde))
names(ha_geb)<- tolower(names(ha_geb))
ha_df <- ha_geb %>%
mutate(typ="EFH")
my_sum(ha_df, n_preis, s_j_erhjahr)
ZHshape <- rgdal::readOGR('L:/STAT/08_DS/03_GIS/Geodaten/Administrative_Grenzen/Gemeinden/Politische_Gemeinden_ZH/Shapes_Stände/Shape_generalisiert_2018/GEN_A4_GEMEINDEN_2018_F.shp')
swissgridneu<-CRS("+init=epsg:2056")
hexbin_orig <- rgdal::readOGR("L:/STAT/08_DS/03_GIS/Geodaten/Raster/Hexbin/Hexbin_0.5sqkm/Hexbin_05sqkm.shp")
proj4string(hexbin_orig) <- swissgridneu
hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data))
ha_geb<- ha_df %>%
ZHshape <- rgdal::readOGR('L:/STAT/08_DS/03_GIS/Geodaten/Administrative_Grenzen/Gemeinden/Politische_Gemeinden_ZH/Shapes_Stände/Shape_generalisiert_2018/GEN_A4_GEMEINDEN_2018_F.shp')
swissgridneu<-CRS("+init=epsg:2056")
hexbin_orig <- rgdal::readOGR("L:/STAT/08_DS/03_GIS/Geodaten/Raster/Hexbin/Hexbin_0.5sqkm/Hexbin_05sqkm.shp")
proj4string(hexbin_orig) <- swissgridneu
hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data)))
ha_geb<- ha_df %>%
dplyr::filter(centroid_x>0 &  (typ=="EFH" & n_preis<5000000) )
coordinates(ha_geb)<-ha_geb[,c("centroid_x", "centroid_y")]
proj4string(ha_geb)<-swissgridneu
# Set a unique identifier for both of the data frames
#hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data)))
ha_geb@data <- mutate(ha_geb@data, id_ha_geb = as.numeric(rownames(ha_geb@data)))
# The houses get the value of the grid they are on top of
hex_geb <- over(ha_geb, hexbin_orig)
View(hex_geb)
test <- hexbin_orig %>% as.data.frame()
View(test)
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(BFS==133, 295,
ifelse(BFS==217, 294, BFS)))
View(test)
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(BFS=="133", "295",
ifelse(BFS=="217", "294", BFS)))
View(test)
View(test)
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(as.numeric(BFS)==133, 295,
ifelse(as.numeric(BFS)==217, 294, as.numeric(BFS))))
test <- hexbin_orig %>% as.data.frame()
View(test)
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(as.numeric(as.character(BFS))==133, 295,
ifelse(as.numeric(as.character(BFS))==217, 294, as.numeric(as.character(BFS)))))
test <- hexbin_orig %>% as.data.frame()
hexbin_orig <- rgdal::readOGR("L:/STAT/08_DS/03_GIS/Geodaten/Raster/Hexbin/Hexbin_0.5sqkm/Hexbin_05sqkm.shp")
proj4string(hexbin_orig) <- swissgridneu
hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data)))
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(as.numeric(as.character(BFS))==133, 295,
ifelse(as.numeric(as.character(BFS))==217, 294, as.numeric(as.character(BFS)))))
test <- hexbin_orig %>% as.data.frame()
View(test)
ZHshape <- rgdal::readOGR('L:/STAT/08_DS/03_GIS/Geodaten/Administrative_Grenzen/Gemeinden/Politische_Gemeinden_ZH/Shapes_Stände/Shape_generalisiert_2018/GEN_A4_GEMEINDEN_2018_F.shp')
swissgridneu<-CRS("+init=epsg:2056")
hexbin_orig <- rgdal::readOGR("L:/STAT/08_DS/03_GIS/Geodaten/Raster/Hexbin/Hexbin_0.5sqkm/Hexbin_05sqkm.shp")
proj4string(hexbin_orig) <- swissgridneu
hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data)))
hexbin_orig@data <- mutate(hexbin_orig@data, BFS=ifelse(as.numeric(as.character(BFS))==133, 295,
ifelse(as.numeric(as.character(BFS))==217, 294, as.numeric(as.character(BFS)))))
ha_geb<- ha_df %>%
dplyr::filter(centroid_x>0 &  (typ=="EFH" & n_preis<5000000) )
coordinates(ha_geb)<-ha_geb[,c("centroid_x", "centroid_y")]
proj4string(ha_geb)<-swissgridneu
# Set a unique identifier for both of the data frames
#hexbin_orig@data <- mutate(hexbin_orig@data, id_grid = as.numeric(rownames(hexbin_orig@data)))
ha_geb@data <- mutate(ha_geb@data, id_ha_geb = as.numeric(rownames(ha_geb@data)))
# The houses get the value of the grid they are on top of
hex_geb <- over(ha_geb, hexbin_orig)
# the order didn't change so re add id_bus to the new table
hex_geb <- mutate(hex_geb, id_ha_geb = as.numeric(rownames(hex_geb)))
#Now join each original business to its grid location
hex_geb <- left_join(ha_geb@data, hex_geb, by = c("id_ha_geb" = "id_ha_geb"))
ha_data <- hex_geb %>% dplyr::select(-id_grid, -GRID_ID)
random=runif(length(hex_geb$id_grid),0,1) %>% as.data.frame() %>% dplyr::rename(random=".")
hex_geb_fake <- hex_geb %>%  bind_cols(random) %>%mutate(n_preis=n_preis*random) %>% dplyr::select(-random, -parznr, -id_ha_geb)
save(hex_geb_fake, file = "hex_geb_fake.RData")
save(hexbin_orig, file = "hexbin_orig.RData")
save(ZHshape, file = "ZHshape.RData")
load(file = "hexbin_orig.RData")
load(file = "hex_geb_fake.RData")
load(file = "ZHshape.RData")
tmap_mode("plot")
hex_geb_data <- hex_geb_fake %>%
mutate(bfs_akt=ifelse(bfs_akt==133, 295,
ifelse(bfs_akt==217, 294, bfs_akt))) %>%
group_by(bfs_akt) %>%
summarise(anz=n(),
med_preis=median(n_preis/500))
ZHshape2 <- ZHshape
ZHshape2@data <- ZHshape2@data %>% mutate(BFS=as.numeric(as.character(BFS)))
ZHshape2@data <- left_join(ZHshape2@data, hex_geb_data, by = c("BFS" = "bfs_akt"))
ZHshape2@data <- ZHshape2@data %>% as.data.frame()
test <- ZHshape2 %>% as.data.frame()
View(test)
View(hex_geb_fake)
View(hex_geb_fake)
